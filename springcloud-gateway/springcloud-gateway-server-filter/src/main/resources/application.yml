spring:
  application:
    name: gateway-server-filter
  cloud:
    # 统一网关
    gateway:
      discovery:
        locator:
          enabled: true # 开启从注册中心创建动态路由的功能, 利用服务名进行路由.
      routes: # 一个请求满足多个路由的谓词条件时，请求只会被首个成功匹配的路由转发
        # 添加参数过滤器配置
        - id: add_request_parameter_route
          uri: lb://gateway-provider01-app
          filters:
            # 给所有的请求添加一个name参数, 值为 bonny
            # 详见: https://cloud.spring.io/spring-cloud-gateway/reference/html/#gatewayfilter-factories
            - AddRequestParameter=name, bonny
          predicates:
            - Path=/test/**
        # 限流过滤器配置
        - id: request_rate_limiter_route
          uri: lb://gateway-provider01-app
          filters:
            - name: RequestRateLimiter
              args:
                # replenishRate 和 burstCapacity 设置一样的值可以保证匀速请求, burstCapacity 高于 replenishRate 可以处理突增流量的场景.
                # 若想实现每分钟仅允许处理1个请求, 可通过配置 replenishRate=1, requestedTokens=60, requestedTokens=60 来实现.
                redis-rate-limiter.replenishRate: 1 # 允许用户每秒处理多少个请求
                redis-rate-limiter.burstCapacity: 1 # 令牌桶的容量，允许在一秒钟内完成的最大请求数
                redis-rate-limiter.requestedTokens: 1 # 请求花费的令牌数量, 默认为1
                key-resolver: "#{@requestIdKeyResolver}" # 用户key解析器, 这是一个spring EL表达式, 可获取Java代码定义的bean
          predicates:
            - Method=POST
        # 重试配置
        - id: retry_route
          uri: lb://gateway-provider01-app
          filters:
            - name: Retry
              args:
                retries: 3
                statuses: BAD_GATEWAY # 哪些状态下会重试, 具体见: org.springframework.http.HttpStatus
                methods: GET,POST # 哪些方法会重试
                backoff:
                  firstBackoff: 10ms
                  maxBackoff: 50ms
                  factor: 2
                  basedOnPreviousValue: false
          predicates:
            - Host=*.retry.com
        # 断路器配置
        - id: circuitbreaker_route
          uri: lb://gateway-provider01-app
          filters:
            - name: CircuitBreaker
              args:
                name: myCircuitBreaker
                fallbackUri: forward:/fallback
          predicates:
            - Path=/downgrade

# eureka
eureka:
  client:
    service-url:
      defaultZone: http://localhost:8761/eureka

# 服务端口
server:
  port: 8080

# 日志配置
logging:
  level:
    root: info
    org.springframework.cloud: debug