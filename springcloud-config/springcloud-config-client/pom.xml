<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>3.0.13</version>
		<relativePath/> <!-- lookup parent from repository -->
	</parent>

	<groupId>com.springcloud</groupId>
	<artifactId>springcloud-config-client</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<description>配置中心客户端</description>

	<properties>
		<spring-cloud.version>2022.0.5</spring-cloud.version>
	</properties>

	<dependencies>
		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-starter-config</artifactId>
		</dependency>

		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>

		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-actuator</artifactId>
		</dependency>

		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-starter-netflix-eureka-client</artifactId>
		</dependency>

		<!--若配置文件没有配置spring.config.import, 则必须引入该依赖. 原因见: https://docs.spring.io/spring-cloud-config/reference/client.html

		Config First Bootstrap
			To use the legacy bootstrap way of connecting to Config Server, bootstrap must be enabled via a property or the spring-cloud-starter-bootstrap starter.
			The property is spring.cloud.bootstrap.enabled=true. It must be set as a System Property or environment variable.
			Once bootstrap has been enabled any application with Spring Cloud Config Client on the classpath will connect to Config Server as follows:
			When a config client starts, it binds to the Config Server (through the spring.cloud.config.uri bootstrap configuration property)
			and initializes Spring Environment with remote property sources.

			The net result of this behavior is that all client applications that want to consume the Config Server need a bootstrap.yml (or an environment variable)
			with the server address set in spring.cloud.config.uri (it defaults to "http://localhost:8888").
		-->
		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-starter-bootstrap</artifactId>
		</dependency>

	</dependencies>

	<dependencyManagement>
		<dependencies>
			<dependency>
				<groupId>org.springframework.cloud</groupId>
				<artifactId>spring-cloud-dependencies</artifactId>
				<version>${spring-cloud.version}</version>
				<type>pom</type>
				<scope>import</scope>
			</dependency>
		</dependencies>
	</dependencyManagement>

	<build>
		<plugins>
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
			</plugin>
		</plugins>
	</build>

</project>
